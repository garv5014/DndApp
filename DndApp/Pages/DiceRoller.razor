@page "/diceroller"
@using System.ComponentModel.DataAnnotations;
@using System;
@using System.Threading;
@using System.Globalization;
<h3>Dice Roller</h3>

<div class="col-lg-2 col-md-6  align-self-center">
                <label class="form-label p-0">Number of sides on the die</label>
            </div>
                <div class="col-lg-2 col-md-6">
                <InputNumber class="form-control" @bind-Value="DieSides" />
            </div>

            <div class="col-lg-2 col-md-6  align-self-center">
                <label class="form-label p-0">Number of dice</label>
            </div>
                <div class="col-lg-2 col-md-6">
                <InputNumber class="form-control" @bind-Value="DieCount" />
            </div>
            <div class="row">
            <div class="col-sm-4 text-sm-end align-self-center">
            </div>
            <div class="col-8">
                <button type="submit" class="btn btn-outline-primary" @onclick="(e => DiceRoll(DieSides, DieCount))">Roll</button>
            </div>
        </div>

@if(RollResults != null)
{
    <table>
        <tr>
            @foreach(int roll in RollResults)
            {
                <td class="card col-sm-3 m-2" style="width: 16rem;">
                    @roll
                </td>
            }
        </tr>
    </table>
}
@code {

    [Required, Range(1, 500)]
    public int DieSides { get; set; }
    [Required, Range(1, 500)]
    public int DieCount { get; set; }

    public long Ticks { get; set; }

    public DateTime Here { get; set; }
    Random instance;

    int roll;

    public List<int> RollResults = new List<int>();

    Random rnd1 = new Random();
    public void DiceRoll(int sides, int count)
    {
        RollResults.Clear();
        for(int i=0; i < count; i++)
        {
            Here = DateTime.Now;
            Ticks = Here.Ticks;
            if(Ticks < 0){
                Ticks *= -1;   
            }
            instance = new Random((int)Ticks);
            roll = instance.Next(sides) + 1;
            RollResults.Add(roll);
            Thread.Sleep(50);
        }
       StateHasChanged();
    }

}
