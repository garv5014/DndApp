@page "/YourCharacters"
@attribute [Authorize]
@using DndApp.Components
@using DndApp.Data;
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.EntityFrameworkCore;
@using SqliteWasmHelper;
@using DndApp.Services;
@inject ISqliteWasmDbContextFactory<DNDDbContext> contextFactory
@inject AuthenticationStateProvider authStateProvider
<div class="text-center">

    @if (Characters.Any() && !ShowCharacter)
    {
        <h3>Here Are Your Characters</h3>
        <div class="row"> 
        @foreach (var character in Characters)
        {
                <div class="card col-lg-3">
                        <div class=" card-body">
                        <button class="btn" @onclick="@(() => ShowCharacterPage(character))">
                                @character.Name
                        </button>
                        </div>
                </div>
        }
        </div>
    }else if(!ShowCharacter)
    {
        <h1> No Characters found.</h1>
    }else {
        <UserCharacter characterInfo="DisplayedCharacter" />
    }

</div>

@code {
    public DNDDbContext ctx { get; set; }
    public List<UserCharacterInfo> Characters { get; set; }
    public UserCharacterInfo DisplayedCharacter { get; set; }
    public bool ShowCharacter { get; set; }



    protected override async Task OnInitializedAsync()
    {
        var context = await authStateProvider.GetAuthenticationStateAsync();
        var userid = context.User.FindFirst(u => u.Type.Contains("sub"))?.Value;
        ctx = await contextFactory.CreateDbContextAsync();
        Characters = await  ctx.UserCharacterInfos.Where(a => a.UserId == userid).ToListAsync();
    }

    public async Task ShowCharacterPage(UserCharacterInfo character)
    {
        DisplayedCharacter = character;
        ShowCharacter = true;
        StateHasChanged();
    }
}
