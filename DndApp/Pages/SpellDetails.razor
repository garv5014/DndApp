@page "/spell/{spellindex}"
@using System.Text.Json;
@using System.Text.Json.Serialization;
@using DndApp.Data;
@using DndApp.Services
@inject JsonService jservice;

@if(@mySpell != null){
<h3>Spell Details</h3>

<p>Name: @mySpell.name</p>
<p>Description: @mySpell.desc[0]</p>
<p>Range: @mySpell.range</p>
<p>Components:</p>
@foreach(string comp in mySpell.components){
    <p>@comp</p>
}
    @if (mySpell.higher_level.Length != 0)
    {
        <p>Effects at higher levels:</p>
        @foreach (string level in mySpell.higher_level)
        {
            <p>@level</p>
        }
    }
    @if(mySpell.material != null){
    <p>Material: @mySpell.material</p>
}
<p>Duration: @mySpell.duration</p>
<p>Requires conentration: @mySpell.concentration</p>
<p>Casting time: @mySpell.casting_time</p>
    <p>Level: @mySpell.level</p>
    if (mySpell.attack_type != null)
    {
        <p>Attack Type: @mySpell.attack_type</p>
    }
    if (mySpell.damage != null && mySpell.damage.damage_at_slot_level != null)
    {
        <p>Damage Type: @mySpell.damage.damage_type.name</p<!--Add code to link this to the damage type page?-->
        <p>Damage at levels:</p>
        <p>2: @mySpell.damage.damage_at_slot_level._2</p>
        <p>3: @mySpell.damage.damage_at_slot_level._3</p>
        <p>4: @mySpell.damage.damage_at_slot_level._4</p>
        <p>5: @mySpell.damage.damage_at_slot_level._5</p>
        <p>6: @mySpell.damage.damage_at_slot_level._6</p>
        <p>7: @mySpell.damage.damage_at_slot_level._7</p>
        <p>8: @mySpell.damage.damage_at_slot_level._8</p>
        <p>9: @mySpell.damage.damage_at_slot_level._9</p>
    }
<p>School of Magic: @mySpell.school.name</p><!--Add code to link this to the school page-->
<p>Classes that can cast:</p>
@foreach(Spell.Class1 data in @mySpell.classes)
{
    <p>@data.name</p>
}
<p>Subclasses that can cast:</p>
@foreach (Spell.Subclass data in @mySpell.subclasses)
{
    <p>@data.name</p><!--Add code to link this to the subclass page-->
}

}
@code {
    [Parameter]
    public string spellindex { get; set; }

    //get only spell data
    //build spell class
    public Spell.Rootobject mySpell { get; set; }

    protected override async Task OnInitializedAsync()
    {
        mySpell = await jservice.Spell(spellindex);
    }
}
