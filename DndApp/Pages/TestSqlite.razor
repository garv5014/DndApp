@page "/TestSqlite"
@using Microsoft.Data.Sqlite;
@using Microsoft.EntityFrameworkCore;
@using System.Runtime.InteropServices;
<h3>TestSqlite</h3>

<button @onclick="RunEfCore">Run Ef Core</button>

@code {
    [Inject]
    private IJSRuntime _js { get; set; }

    private string _version = "unknown";

    private readonly List<Name> _Name = new();

    [Inject]
    private IDbContextFactory<DNDDbContext> _dbContextFactory { get; set; }
    protected override async Task OnInitializedAsync()
    {
        // create SQLite database file in browser
        if (RuntimeInformation.IsOSPlatform(OSPlatform.Create("browser")))
        {
            var module = await _js.InvokeAsync<IJSObjectReference>("import", "./DbStorage.js");
            await module.InvokeVoidAsync("synchronizeFileWithIndexedDb", "DND.db");
        }
        await using var db = await _dbContextFactory.CreateDbContextAsync();
        await db.Database.EnsureCreatedAsync();
        await Update(db);
        await base.OnInitializedAsync();
    }

    private async Task SQLiteVersion()
    {
        await using var db = new SqliteConnection($"Data Source=Dnd.db");
        await db.OpenAsync();
        await using var cmd = new SqliteCommand("SELECT SQLITE_VERSION()", db);
        _version = (await cmd.ExecuteScalarAsync())?.ToString();
    }

    private async Task Update(DNDDbContext db)
    {
        await db.SaveChangesAsync();
        StateHasChanged();
    }
    private async Task RunEfCore()
    {
        var db = await _dbContextFactory.CreateDbContextAsync();
        var nextId = db.Names!.Count() + 1;
        await db.Names.AddAsync(new Name { Id = nextId, FullName = "Abdul Rahman" });
        await Update(db);
        await foreach (var name in db.Names.AsAsyncEnumerable())
        {
            Console.WriteLine(name.FullName);
            Console.WriteLine(name.Id);
        }
    }
}